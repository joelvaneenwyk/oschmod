[build-system]
requires = [
    'setuptools>=65.4.0; python_version > "3.0"',
    # Pin this version as we know it will not update again.
    'setuptools==44.1.1; python_version < "3.0"'
]
build-backend = "setuptools.build_meta"

[project]
name = "oschmod"
description = "Windows, Linux, and macOS compatible `chmod` library."
requires-python = ">=3.8"
dynamic = ["version"]
authors = [
    { name = "YakDriver", email = "dirk.avery@GEEmail.com" },
    { name = "Joel Van Eenwyk", email = "joel.vaneenwyk@gmail.com" }
]
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Utilities"
]
urls = { Homepage = "https://github.com/joelvaneenwyk/oschmod" }
dependencies = [
    'pywin32>=306; sys_platform=="win32"',
    'pip==20.3.4; python_version < "3.0"',
    'build==0.5.1; python_version < "3.0"',
    'build>=1.0.3; python_version > "3.0"'
]

[project.scripts]
oschmod = "oschmod.cli:main"
ochmod = "oschmod.cli:main"

[tool.rye]
dev-dependencies = [
    # test
    'mock>=5.1.0',
    'pytest>=6.1.2',
    'pytest-cov>=2.4.0',
    'pytest-mock',
    'pytest-xdist',
    # lint
    "mypy>=1.0.0",
    "flake8>=3.9.2",
    "pylint>=2.7.4",
    "ruff>=0.1.0",
    'black>=22.3.0',
    # ci
    "pytest-github-actions-annotate-failures>=0.2.0",
    # release
    'pyinstaller',
    "bump-my-version>=0.16.1",
    # types
    'types-chevron>=0.14.2',
    'types-psutil>=5.9.5.1',
    'types-pywin32>=306',
    'types-PyYAML>=6.0.12',
    'types-setuptools>=65.4.0.0',
    # dev
    'tox>=4.11.4',
    'invoke>=2.2.0',
    'poethepoet>=0.24.4',
    'pre-commit==1.21.0; python_version<="3.0"',
    'pre-commit<3.6.0; python_version<="3.8" and python_version>="3.0"',
    'pre-commit>=3.6.0; python_version>="3.9"',
    "tox>=4.15.1",
    "ruff>=0.4.10",
    "uv>=0.2.17",
    "mypy>=1.10.1",
    "pylint>=3.2.4",
    "isort>=5.13.2"
]

[tool.setuptools]
packages = ["oschmod"]
include-package-data = true
platforms = ["Linux", "Windows", "Darwin"]

[tool.setuptools.package-data]
"*" = [
    ".mergify.yml",
    "*.txt",
    "*.lock",
    ".editorconfig",
    ".mergify.yml",
    ".pre-commit-config.yaml",
    "setup.cmd",
    "setup.sh",
    "tox.ini"
]
"oschmod" = ["py.typed"]

[tool.setuptools.exclude-package-data]
"*" = ["*.py[cod]", "__pycache__", "*.so", "*.dylib", ".git"]
"oschmod" = [".gitattributes"]

[tool.setuptools.dynamic]
readme = { file = ["README.md", "CHANGELOG.md"], content-type = "text/markdown" }
version = { attr = "oschmod.__version__" }

[tool.distutils.bdist_wheel]
universal = 1

[tool.pytest.ini_options]
filterwarnings = "ignore::pytest.PytestConfigWarning"
mock_use_standalone_module = true
norecursedirs = [
    ".git",
    ".tox",
    ".venv",
    ".ruff_cache",
    ".mypy-cache",
    ".env",
    "__pycache__",
    "dist",
    "build",
    "htmlcov"
]
testpaths = ["tests"]
addopts = '''
-rxEfsw
--strict-markers
--doctest-modules
--doctest-glob=\*.md
--tb=short'''

[tool.ruff]
line-length = 100
exclude = [".tox", ".git", "__pycache__", ".eggs", "*.egg", "build", "dist", "htmlcov", "*/static/salt/formulas/*"]
target-version = "py38"

[tool.ruff.lint]
ignore = ["D107", "D211", "D213", "D203"]
select = ["D", "E", "F", "W"]

[tool.pyright]
ignore = ["build/"]

[tool.virtualenv]
include-system-site-packages = false

[tool.bumpversion]
current_version = "0.3.12"
commit = true
commit_args = "--no-verify"
tag = true
tag_name = "{new_version}"
allow_dirty = true
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.(?P<dev>post)\\d+\\.dev\\d+)?"
serialize = ["{major}.{minor}.{patch}.{dev}{$PR_NUMBER}.dev{distance_to_latest_tag}", "{major}.{minor}.{patch}"]
message = "Version updated from {current_version} to {new_version}"

[tool.bumpversion.parts.dev]
values = ["release", "post"]

[[tool.bumpversion.files]]
filename = "oschmod/__init__.py"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...{new_version}"
